import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import pandas as pd
import time
import random
from datetime import datetime
import logging
import sys
import os
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === 1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞ ===
log_filename = "aisoip_log.txt"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_filename, encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ]
)

# === 2Ô∏è‚É£ URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ===
base_url_list = "https://aisoip.adilet.gov.kz/rest/debtor/findErd"
base_url_detail = "https://aisoip.adilet.gov.kz/rest/debtor/findErd/detail"

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36 Edg/141.0.0.0",
    "Accept": "application/json, text/plain, */*",
    "Accept-Language": "ru",
    "Referer": "https://aisoip.adilet.gov.kz/debtors"
}

# === 3Ô∏è‚É£ –°–µ—Å—Å–∏—è —Å retry ===
session = requests.Session()
retries = Retry(
    total=5,
    backoff_factor=2,
    status_forcelist=[500, 502, 503, 504],
    allowed_methods=["GET", "POST"]
)
adapter = HTTPAdapter(max_retries=retries)
session.mount("https://", adapter)
session.mount("http://", adapter)

# === 4Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –ò–ò–ù–æ–≤ ===
try:
    df_iin = pd.read_csv("divided_filtered_iin_part2_1.csv", header=None, names=["iin"])
    iins = df_iin["iin"].astype(str).tolist()
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ iin.csv: {e}")
    sys.exit(1)

if not iins:
    logging.warning("‚ö†Ô∏è –§–∞–π–ª iin.csv –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ò–ò–ù.")
    sys.exit(0)

logging.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ò–ò–ù–æ–≤: {len(iins)}")

# === 5Ô∏è‚É£ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===
progress_file = "progress2.txt"
processed_iins = set()

if os.path.exists(progress_file):
    try:
        with open(progress_file, "r", encoding="utf-8") as f:
            processed_iins = set(line.strip() for line in f if line.strip())
        logging.info(f"üîÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚Äî —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_iins)} –ò–ò–ù–æ–≤")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å progress.txt: {e}")

def save_progress(iin):
    try:
        with open(progress_file, "a", encoding="utf-8") as f:
            f.write(str(iin) + "\n")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ progress.txt: {e}")

# === 6Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç –ø–æ –ò–ò–ù ===
def age_from_iin(iin: str) -> int:
    try:
        year = int(iin[0:2])
        month = int(iin[2:4])
        day = int(iin[4:6])
        century_code = int(iin[6])
        if century_code in [1, 2]:
            year += 1800
        elif century_code in [3, 4]:
            year += 1900
        elif century_code in [5, 6]:
            year += 2000
        else:
            return 0
        birth_date = datetime(year, month, day)
        today = datetime.now()
        return today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
    except:
        return 0

# === 7Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ===
output_file = "debtors_detailed_1.csv"
all_records = []

SAVE_EVERY = 50  # –∫–∞–∂–¥—ã–µ 50 –ò–ò–ù —Å–æ—Ö—Ä–∞–Ω—è–µ–º (–∏–ª–∏ –∫–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –º–Ω–æ–≥–æ –¥–µ–ª)
processed_iins_count = 0

for iin in iins:
    if iin in processed_iins:
        logging.info(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ò–ò–ù: {iin}")
        continue

    processed_iins_count += 1 
    logging.info(f"üîé –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò–ù: {iin}")
    age = age_from_iin(iin)
    if age < 18:
        logging.info(f"üö´ –ü—Ä–æ–ø—É—Å–∫ ‚Äî –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω—É {age} –ª–µ—Ç (<18).")
        save_progress(iin)
        continue

    params_list = {"page": 0, "size": -1}
    payload = {
        "iin": iin,
        "fullName": "",
        "searchType": 0,
        "captcha": "HFMXdsIg5KUTEVAkhZH11IHhkTMzw9QB4rTR8LYDweWhooRCY9VQJxYRdgdy1McAAqXxB1VQQfGEJTDDQnYQQRc3sRUVJ-GVtXKUomJEUzZXBKfSM1Cz1CPxkLLVJIEkJCCEl5bSZ7W0QDWxdtBV8eIX5zbTMKQXpRFnASUVhcA1tEUlwIQgQIQn8RJCtMbVpwFwoMETYdXhMtWSFbVnRkYxUrNwU",
        "action": "findErd"
    }

    blocked = False

    for attempt in range(3):
        try:
            resp = session.post(base_url_list, headers=headers, params=params_list, json=payload, timeout=25, verify=False)

            if resp.status_code in [403, 429]:
                logging.warning(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ({resp.status_code}) ‚Äî –ø–∞—É–∑–∞ 60 —Å–µ–∫")
                blocked = True
                time.sleep(60)
                continue

            resp.raise_for_status()
            data = resp.json()
            debtors = data.get("content", [])
            searchid = data.get("pagination", {}).get("searchId")

            if not debtors:
                logging.info(f"üö´ –ü–æ –ò–ò–ù {iin} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–ª.")
                break

            logging.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: {len(debtors)}")

            for d in debtors:
                params_detail = {
                    "id": d["id"],
                    "typedata": d["typeData"],
                    "uuid": d["uid"],
                    "searchid": searchid
                }

                try:
                    r = session.get(base_url_detail, headers=headers, params=params_detail, timeout=20, verify=False)
                    if r.status_code in [403, 429]:
                        logging.warning("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—è—Ö ‚Äî –∂–¥—ë–º 60 —Å–µ–∫")
                        time.sleep(60)
                        blocked = True
                        continue

                    if r.status_code >= 500:
                        logging.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ {r.status_code}, –∂–¥—ë–º 10 —Å–µ–∫")
                        time.sleep(10)
                        continue

                    if r.status_code == 200:
                        json_data = r.json()
                        detail = json_data.get("detailInfo") or {}
                        primary = json_data.get("primaryAccount") or {}
                        secondary = json_data.get("secondaryAccount") or {}

                        record = {
                            "–ò–ò–ù": iin,
                            "–í–æ–∑—Ä–∞—Å—Ç": age,
                            "–§–ò–û –¥–æ–ª–∂–Ω–∏–∫–∞": detail.get("debtorFullName", ""),
                            "–û—Ä–≥–∞–Ω, –≤—ã–¥–∞–≤—à–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç": detail.get("ilOrgan_ru", ""),
                            "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": detail.get("officerFullName", ""),
                            "–¢–µ–ª–µ—Ñ–æ–Ω": detail.get("officerPhone", ""),
                            "Email": detail.get("officerEmail", ""),
                            "–ê–¥—Ä–µ—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": detail.get("officerAddress", ""),
                            "–ù–æ–º–µ—Ä –ò–ü": detail.get("execProcNum", ""),
                            "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ò–ü": detail.get("ipStartDate", ""),
                            "–í–∑—ã—Å–∫–∞—Ç–µ–ª—å": detail.get("recovererFullName", ""),
                            "–°—É–º–º–∞ –≤–∑—ã—Å–∫–∞–Ω–∏—è": detail.get("recoveryAmount", ""),
                            "–û—Ä–≥–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä-–≤–∞, —Å—É–¥–µ–±–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": detail.get("disaDepartmentName_ru", ""),
                            "–°—Ç–∞—Ç—É—Å": detail.get("status_ru", ""),
                            "–ü–æ–ª—É—á–∞—Ç–µ–ª—å (–æ—Å–Ω–æ–≤–Ω–æ–π)": primary.get("name_ru", ""),
                            "–ò–ò–ö (–æ—Å–Ω–æ–≤–Ω–æ–π)": primary.get("iik", ""),
                            "–ë–ò–ö (–æ—Å–Ω–æ–≤–Ω–æ–π)": primary.get("bik", ""),
                            "–ö–ë–ï (–æ—Å–Ω–æ–≤–Ω–æ–π)": primary.get("kbe", ""),
                            "–ö–ù–ü (–æ—Å–Ω–æ–≤–Ω–æ–π)": primary.get("knp", ""),
                            "–ö–ë–ö (–æ—Å–Ω–æ–≤–Ω–æ–π)": primary.get("kbk", ""),
                            "–ö–ù–û (–æ—Å–Ω–æ–≤–Ω–æ–π)": primary.get("kno", ""),
                            "–ü–æ–ª—É—á–∞—Ç–µ–ª—å (–≤—Ç–æ—Ä–æ–π)": secondary.get("name_ru", ""),
                            "–ò–ò–ö (–≤—Ç–æ—Ä–æ–π)": secondary.get("iik", ""),
                            "–ë–ò–ö (–≤—Ç–æ—Ä–æ–π)": secondary.get("bik", ""),
                            "–ö–ë–ï (–≤—Ç–æ—Ä–æ–π)": secondary.get("kbe", ""),
                            "–ö–ù–ü (–≤—Ç–æ—Ä–æ–π)": secondary.get("knp", ""),
                            "–ö–ë–ö (–≤—Ç–æ—Ä–æ–π)": secondary.get("kbk", ""),
                            "–ö–ù–û (–≤—Ç–æ—Ä–æ–π)": secondary.get("kno", ""),
                            "–î–∞—Ç–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ –≤—ã–µ–∑–¥": detail.get("banStartDate", ""),
                            "id": d["id"],
                            "uuid": d["uid"]
                        }

                        all_records.append(record)
                        logging.info(f"‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ –¥–µ–ª—É {d['id']} –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                    else:
                        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {r.status_code} –ø—Ä–∏ –¥–µ—Ç–∞–ª—è—Ö –ø–æ id {d['id']}")
                except Exception as e2:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—è—Ö –ø–æ id {d.get('id')}: {e2}")

                time.sleep(random.uniform(0.05, 0.2))  # –º–µ–∂–¥—É –¥–µ–ª–∞–º–∏

            break

        except requests.exceptions.SSLError as e:
            logging.warning(f"‚ö†Ô∏è SSL –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/3): {e}")
            time.sleep(8)
        except requests.exceptions.RequestException as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/3): {e}")
            time.sleep(5)
        except Exception as e:
            logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ N –ò–ò–ù –∏–ª–∏ –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π
    if (processed_iins_count % SAVE_EVERY == 0) or len(all_records) > 200:
        try:
            df = pd.DataFrame(all_records)
            file_exists = os.path.exists(output_file)
            df.to_csv(
                output_file,
                mode='a',
                header=not file_exists,
                index=False,
                encoding='utf-8-sig'
            )
            logging.info(
                f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(all_records)} –∑–∞–ø–∏—Å–µ–π "
                f"(–ø–æ—Å–ª–µ {processed_iins_count} –ò–ò–ù)"
            )
            all_records.clear()
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    save_progress(iin)

    if blocked:
        logging.info("‚è≥ –û—Ç–¥—ã—Ö 60 —Å–µ–∫ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
        time.sleep(60)
    else:
        time.sleep(random.uniform(0.05, 0.15))

if all_records:
    df = pd.DataFrame(all_records)
    file_exists = os.path.exists(output_file)
    df.to_csv(
        output_file,
        mode='a',
        header=not file_exists,
        index=False,
        encoding='utf-8-sig'
    )
    logging.info(f"üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(all_records)} –∑–∞–ø–∏—Å–µ–π")

logging.info("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é!")
logging.info(f"üìÇ –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {output_file}")
logging.info(f"ü™µ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {log_filename}")
logging.info(f"üìò –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {progress_file}")
